{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":17777,"databundleVersionId":869809,"sourceType":"competition"},{"sourceId":380554,"sourceType":"datasetVersion","datasetId":167266}],"dockerImageVersionId":30138,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/syokouhioku/twitter-nlp?scriptVersionId=179626191\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport torch\nimport re\nfrom torch import nn\nimport spacy \nfrom torch.utils.data import DataLoader, TensorDataset\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_extraction.text import CountVectorizer\nnlp = spacy.load('en_core_web_lg')\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n\n        \n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-25T02:42:59.994923Z","iopub.execute_input":"2024-05-25T02:42:59.995373Z","iopub.status.idle":"2024-05-25T02:43:03.150579Z","shell.execute_reply.started":"2024-05-25T02:42:59.995332Z","shell.execute_reply":"2024-05-25T02:43:03.149696Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')","metadata":{"execution":{"iopub.status.busy":"2024-05-25T02:43:03.152794Z","iopub.execute_input":"2024-05-25T02:43:03.153391Z","iopub.status.idle":"2024-05-25T02:43:03.158633Z","shell.execute_reply.started":"2024-05-25T02:43:03.153335Z","shell.execute_reply":"2024-05-25T02:43:03.157563Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def preprocess(text):\n    \n    text = re.sub('http\\S*', ' ', text)\n    \n    text = re.sub(\"[^a-zA-Z]\", \" \", text)\n    \n    text = text.lower()\n\n    text = re.sub(\"\\s+[a-zA-Z]\\s+\", ' ', text)\n    text = re.sub(\"^[a-zA-Z]\\s+\", '', text)\n    \n    text = re.sub(\"\\s+\", ' ', text)\n    \n    doc = nlp(text)\n    text = [token.lemma_ for token in doc if not token.is_stop]\n    return \" \".join(text)\n\npreprocess(\"She is the soul of my soul\")","metadata":{"execution":{"iopub.status.busy":"2024-05-25T02:43:03.160085Z","iopub.execute_input":"2024-05-25T02:43:03.160335Z","iopub.status.idle":"2024-05-25T02:43:03.186852Z","shell.execute_reply.started":"2024-05-25T02:43:03.160305Z","shell.execute_reply":"2024-05-25T02:43:03.18569Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"dataset = pd.read_csv(r\"/kaggle/input/nlp-getting-started/train.csv\")[['text', 'target']]\ndataset","metadata":{"execution":{"iopub.status.busy":"2024-05-25T02:43:03.190255Z","iopub.execute_input":"2024-05-25T02:43:03.190659Z","iopub.status.idle":"2024-05-25T02:43:03.231966Z","shell.execute_reply.started":"2024-05-25T02:43:03.190607Z","shell.execute_reply":"2024-05-25T02:43:03.23113Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"dataset['clean_text'] = dataset['text'].apply(preprocess)\nmax([len(sent.split()) for sent in dataset['clean_text']])","metadata":{"execution":{"iopub.status.busy":"2024-05-25T02:43:03.233525Z","iopub.execute_input":"2024-05-25T02:43:03.234313Z","iopub.status.idle":"2024-05-25T02:44:20.948277Z","shell.execute_reply.started":"2024-05-25T02:43:03.234269Z","shell.execute_reply":"2024-05-25T02:44:20.947108Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"batch_size = 64\nhidden_size = 32\nlearning_rate = 0.0005\nnum_layers = 5\nn_epochs = 30","metadata":{"execution":{"iopub.status.busy":"2024-05-25T02:44:20.950221Z","iopub.execute_input":"2024-05-25T02:44:20.950609Z","iopub.status.idle":"2024-05-25T02:44:20.956782Z","shell.execute_reply.started":"2024-05-25T02:44:20.950558Z","shell.execute_reply":"2024-05-25T02:44:20.955758Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def word2vec(sent):\n    seq2d = []\n    doc = nlp(sent)\n    for token in doc:\n        seq2d.append(token.vector)\n    while len(seq2d) < 21:\n        seq2d.append([0 for i in range(300)])\n    return np.array(seq2d)\n\nword2vec(dataset['clean_text'][0]).shape","metadata":{"execution":{"iopub.status.busy":"2024-05-25T02:44:20.958488Z","iopub.execute_input":"2024-05-25T02:44:20.959497Z","iopub.status.idle":"2024-05-25T02:44:20.98811Z","shell.execute_reply.started":"2024-05-25T02:44:20.959434Z","shell.execute_reply":"2024-05-25T02:44:20.987083Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X = []\nfor sent in dataset['clean_text']:\n    X.append(word2vec(sent))\nX = np.array(X)\ny = dataset['target'].values\nX.shape","metadata":{"execution":{"iopub.status.busy":"2024-05-25T02:44:20.990598Z","iopub.execute_input":"2024-05-25T02:44:20.991013Z","iopub.status.idle":"2024-05-25T02:45:37.655563Z","shell.execute_reply.started":"2024-05-25T02:44:20.99096Z","shell.execute_reply":"2024-05-25T02:45:37.654201Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train_np, X_test_np, y_train_np, y_test_np = train_test_split(X, y, test_size = 0.3, random_state = 1234)\nX_train_np.shape, X_test_np.shape, y_train_np.shape, y_test_np.shape","metadata":{"execution":{"iopub.status.busy":"2024-05-25T02:45:37.657282Z","iopub.execute_input":"2024-05-25T02:45:37.657654Z","iopub.status.idle":"2024-05-25T02:45:37.831962Z","shell.execute_reply.started":"2024-05-25T02:45:37.657605Z","shell.execute_reply":"2024-05-25T02:45:37.831227Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train = torch.from_numpy(X_train_np.astype(np.float32))\nX_test = torch.from_numpy(X_test_np.astype(np.float32))\ny_train = torch.from_numpy(y_train_np.astype(np.int64))\ny_test = y_test_np.astype(np.int64)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","metadata":{"execution":{"iopub.status.busy":"2024-05-25T02:45:37.834578Z","iopub.execute_input":"2024-05-25T02:45:37.834916Z","iopub.status.idle":"2024-05-25T02:45:37.925321Z","shell.execute_reply.started":"2024-05-25T02:45:37.834878Z","shell.execute_reply":"2024-05-25T02:45:37.924419Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_ds = TensorDataset(X_train, y_train)\ntrain_loader = DataLoader(dataset = train_ds, batch_size = 100, shuffle = True)\nprint(next(iter(train_loader))[0].shape, next(iter(train_loader))[0].shape)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-25T02:45:37.926937Z","iopub.execute_input":"2024-05-25T02:45:37.92745Z","iopub.status.idle":"2024-05-25T02:45:37.994255Z","shell.execute_reply.started":"2024-05-25T02:45:37.927399Z","shell.execute_reply":"2024-05-25T02:45:37.993478Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"class LSTM(nn.Module):\n    def __init__(self, sequence_length, hidden_size, num_layers):\n        super(LSTM, self).__init__()\n        self.sequence_length = sequence_length\n        self.hidden_size = hidden_size\n        self.num_layers = num_layers\n        \n        self.lstm = nn.LSTM(sequence_length, hidden_size = self.hidden_size, num_layers = self.num_layers, batch_first = True, bidirectional = True)\n        self.linear = nn.Linear(self.hidden_size * 2, 2)\n    \n    def forward(self, x):\n        h0 = torch.zeros(self.num_layers * 2, x.size(0), self.hidden_size).to(device)\n        c0 = torch.zeros(self.num_layers * 2, x.size(0), self.hidden_size).to(device)\n        out, _ = self.lstm(x, (h0, c0))\n        out = self.linear(out[:, -1, :])\n        return out","metadata":{"execution":{"iopub.status.busy":"2024-05-25T02:45:37.995398Z","iopub.execute_input":"2024-05-25T02:45:37.996101Z","iopub.status.idle":"2024-05-25T02:45:38.006518Z","shell.execute_reply.started":"2024-05-25T02:45:37.996064Z","shell.execute_reply":"2024-05-25T02:45:38.005477Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# model\nmodel = LSTM(X.shape[2], hidden_size, num_layers).to(device)\n\n# loss\ncritirion = nn.CrossEntropyLoss()\n\n# optimizer\noptimizer = torch.optim.Adam(model.parameters(), lr = learning_rate)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T02:45:38.008247Z","iopub.execute_input":"2024-05-25T02:45:38.008625Z","iopub.status.idle":"2024-05-25T02:45:38.037758Z","shell.execute_reply.started":"2024-05-25T02:45:38.008575Z","shell.execute_reply":"2024-05-25T02:45:38.037019Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for epoch in range(n_epochs):\n    loss_sum = 0\n    for (samples, labels) in train_loader:\n        \n        samples = samples.to(device)\n        labels = labels.to(device)\n        \n        # forward\n        predictions = model(samples)\n        loss = critirion(predictions, labels)\n        \n        # loss\n        loss.backward()\n        \n        # update\n        optimizer.step()\n        optimizer.zero_grad()\n        \n        loss_sum += loss\n    print(f\"epoch = {epoch} | loss = {loss_sum:.4f}\")","metadata":{"execution":{"iopub.status.busy":"2024-05-25T02:45:38.038824Z","iopub.execute_input":"2024-05-25T02:45:38.039569Z","iopub.status.idle":"2024-05-25T02:48:29.206758Z","shell.execute_reply.started":"2024-05-25T02:45:38.039533Z","shell.execute_reply":"2024-05-25T02:48:29.205713Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def predict(x):\n    x = x.to(device)\n    y_pred = model(x.squeeze(1)).max(dim = 1)[1]\n    return y_pred.cpu().detach().numpy()","metadata":{"execution":{"iopub.status.busy":"2024-05-25T02:48:29.208197Z","iopub.execute_input":"2024-05-25T02:48:29.208505Z","iopub.status.idle":"2024-05-25T02:48:29.214235Z","shell.execute_reply.started":"2024-05-25T02:48:29.208467Z","shell.execute_reply":"2024-05-25T02:48:29.21349Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_pred = predict(X_test)\n(y_pred == y_test).sum() / len(y_test)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T02:48:29.21563Z","iopub.execute_input":"2024-05-25T02:48:29.216128Z","iopub.status.idle":"2024-05-25T02:48:29.995295Z","shell.execute_reply.started":"2024-05-25T02:48:29.21609Z","shell.execute_reply":"2024-05-25T02:48:29.994315Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_ds = pd.read_csv(f\"/kaggle/input/nlp-getting-started/test.csv\")\ntest_ds","metadata":{"execution":{"iopub.status.busy":"2024-05-25T02:53:27.320848Z","iopub.execute_input":"2024-05-25T02:53:27.321949Z","iopub.status.idle":"2024-05-25T02:53:27.365177Z","shell.execute_reply.started":"2024-05-25T02:53:27.321878Z","shell.execute_reply":"2024-05-25T02:53:27.364082Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_ds['clean_text'] = test_ds['text'].apply(preprocess)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T02:53:49.687054Z","iopub.execute_input":"2024-05-25T02:53:49.68746Z","iopub.status.idle":"2024-05-25T02:54:22.406496Z","shell.execute_reply.started":"2024-05-25T02:53:49.687422Z","shell.execute_reply":"2024-05-25T02:54:22.405231Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_submit = []\nfor sent in test_ds['clean_text']:\n    X_submit.append(word2vec(sent))\nX_submit = torch.tensor(np.array(X_submit), dtype = torch.float32)\nX_submit.shape","metadata":{"execution":{"iopub.status.busy":"2024-05-25T02:54:22.408508Z","iopub.execute_input":"2024-05-25T02:54:22.408835Z","iopub.status.idle":"2024-05-25T02:54:55.330587Z","shell.execute_reply.started":"2024-05-25T02:54:22.408796Z","shell.execute_reply":"2024-05-25T02:54:55.329667Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions = predict(X_submit)\npredictions.shape, predictions","metadata":{"execution":{"iopub.status.busy":"2024-05-25T02:54:59.166616Z","iopub.execute_input":"2024-05-25T02:54:59.167716Z","iopub.status.idle":"2024-05-25T02:55:00.423722Z","shell.execute_reply.started":"2024-05-25T02:54:59.167631Z","shell.execute_reply":"2024-05-25T02:55:00.422766Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission = pd.DataFrame({\n    \"id\":test_ds['id'],\n    \"target\":predictions\n})\nsubmission","metadata":{"execution":{"iopub.status.busy":"2024-05-25T02:56:01.903088Z","iopub.execute_input":"2024-05-25T02:56:01.903456Z","iopub.status.idle":"2024-05-25T02:56:01.920224Z","shell.execute_reply.started":"2024-05-25T02:56:01.903413Z","shell.execute_reply":"2024-05-25T02:56:01.919031Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission.to_csv('submission.csv', index = False)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T02:57:27.943363Z","iopub.execute_input":"2024-05-25T02:57:27.943689Z","iopub.status.idle":"2024-05-25T02:57:27.959373Z","shell.execute_reply.started":"2024-05-25T02:57:27.94364Z","shell.execute_reply":"2024-05-25T02:57:27.958568Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}